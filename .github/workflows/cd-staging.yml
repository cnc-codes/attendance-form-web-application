name: Deploy Staging üöÄ

on:
  push:
    branches: [ "main" ]

jobs:
  deploy-staging:
    name: Deploy to staging server
    runs-on: ubuntu-latest
    environment: staging

    steps:
      # 1Ô∏è‚É£ Execute deployment on remote server via SSH
      - name: Execute deployment command
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_PATH_STAGING: ${{ vars.APP_PATH_STAGING }}
          GIT_URL: ${{ vars.GIT_URL }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ vars.DB_DBNAME }}
          POSTGRES_HOST: ${{ secrets.DB_HOST }}
          POSTGRES_PORT: ${{ secrets.DB_PORT }}
          APP_HOST: localhost
          APP_PORT: 5001
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: APP_PATH_STAGING, GIT_URL, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, POSTGRES_HOST, POSTGRES_PORT, APP_HOST, APP_PORT
          script: |
            # Clone or update repo
            if [[ -d "${APP_PATH_STAGING}" ]]; then
              cd $APP_PATH_STAGING
              sudo docker compose down
              git pull --rebase
            else
              ssh-keyscan github.com > ~/.ssh/known_hosts
              git clone $GIT_URL $APP_PATH_STAGING
              cd $APP_PATH_STAGING
            fi

            # Update .env file
            echo "POSTGRES_USER=$POSTGRES_USER" > .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
            echo "POSTGRES_DB=$POSTGRES_DB" >> .env
            echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
            echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
            echo "APP_HOST=$APP_HOST" >> .env
            echo "APP_PORT=$APP_PORT" >> .env

            # Build and run container
            sudo docker compose up app-staging --build --detach

            # Wait for server to be ready
            for i in {1..20}; do
              if sudo docker exec app-staging curl -f http://localhost:5000; then
                echo "Staging server is up!"
                break
              else
                echo "Waiting for server... ($i/20)"
                sleep 10
              fi
            done

      # 2Ô∏è‚É£ Hit endpoint from GitHub Actions runner (optional)
      - name: Hit Staging Endpoint
        run: |
          for i in {1..20}; do
            if curl -f ${{ secrets.STAGING_URL }}; then
              echo "Staging endpoint reachable!"
              break
            else
              echo "Waiting for staging endpoint... ($i/20)"
              sleep 10
            fi
          done
